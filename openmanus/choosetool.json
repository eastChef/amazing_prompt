{
     'model': 'qwen-plus',
     'messages': [{
          'role': 'system',
          'content': "You are OpenManus, an all-capable AI assistant, aimed at solving any task presented by the user. You have various tools at your disposal that you can call upon to efficiently complete complex requests. Whether it's programming, information retrieval, file processing, or web browsing, you can handle it all.The initial directory is: /Users/chengchao/git/OpenManus/workspace"
     }, {
          'role': 'user',
          'content': '\n        CURRENT PLAN STATUS:\n        Plan: 收集A热门新闻 (ID: plan_1744186943)\n====================================\n\nProgress: 0/5 steps completed (0.0%)\nStatus: 0 completed, 1 in progress, 0 blocked, 4 not started\n\nSteps:\n0. [→] 确定目标受众和新闻主题范围\n1. [ ] 选择合适的新闻来源或RSS订阅\n2. [ ] 使用API或爬虫技术抓取新闻数据\n3. [ ] 对收集到的新闻进行筛选和分类\n4. [ ] 将筛选后的新闻整理并发布\n\n\n        YOUR CURRENT TASK:\n        You are now working on step 0: "确定目标受众和新闻主题范围"\n\n        Please execute this step using the appropriate tools. When you\'re done, provide a summary of what you accomplished.\n        '
     }, {
          'role': 'user',
          'content': '\nBased on user needs, proactively select the most appropriate tool or combination of tools. For complex tasks, you can break down the problem and use different tools step by step to solve it. After using each tool, clearly explain the execution results and suggest the next steps.\n'
     }],
     'tools': [{
          'type': 'function',
          'function': {
               'name': 'python_execute',
               'description': 'Executes Python code string. Note: Only print outputs are visible, function return values are not captured. Use print statements to see results.',
               'parameters': {
                    'type': 'object',
                    'properties': {
                         'code': {
                              'type': 'string',
                              'description': 'The Python code to execute.'
                         }
                    },
                    'required': ['code']
               }
          }
     }, {
          'type': 'function',
          'function': {
               'name': 'browser_use',
               'description': "A powerful browser automation tool that allows interaction with web pages through various actions.\n* This tool provides commands for controlling a browser session, navigating web pages, and extracting information\n* It maintains state across calls, keeping the browser session alive until explicitly closed\n* Use this when you need to browse websites, fill forms, click buttons, extract content, or perform web searches\n* Each action requires specific parameters as defined in the tool's dependencies\n\nKey capabilities include:\n* Navigation: Go to specific URLs, go back, search the web, or refresh pages\n* Interaction: Click elements, input text, select from dropdowns, send keyboard commands\n* Scrolling: Scroll up/down by pixel amount or scroll to specific text\n* Content extraction: Extract and analyze content from web pages based on specific goals\n* Tab management: Switch between tabs, open new tabs, or close tabs\n\nNote: When using element indices, refer to the numbered elements shown in the current browser state.\n",
               'parameters': {
                    'type': 'object',
                    'properties': {
                         'action': {
                              'type': 'string',
                              'enum': ['go_to_url', 'click_element', 'input_text', 'scroll_down', 'scroll_up', 'scroll_to_text', 'send_keys', 'get_dropdown_options', 'select_dropdown_option', 'go_back', 'web_search', 'wait', 'extract_content', 'switch_tab', 'open_tab', 'close_tab'],
                              'description': 'The browser action to perform'
                         },
                         'url': {
                              'type': 'string',
                              'description': "URL for 'go_to_url' or 'open_tab' actions"
                         },
                         'index': {
                              'type': 'integer',
                              'description': "Element index for 'click_element', 'input_text', 'get_dropdown_options', or 'select_dropdown_option' actions"
                         },
                         'text': {
                              'type': 'string',
                              'description': "Text for 'input_text', 'scroll_to_text', or 'select_dropdown_option' actions"
                         },
                         'scroll_amount': {
                              'type': 'integer',
                              'description': "Pixels to scroll (positive for down, negative for up) for 'scroll_down' or 'scroll_up' actions"
                         },
                         'tab_id': {
                              'type': 'integer',
                              'description': "Tab ID for 'switch_tab' action"
                         },
                         'query': {
                              'type': 'string',
                              'description': "Search query for 'web_search' action"
                         },
                         'goal': {
                              'type': 'string',
                              'description': "Extraction goal for 'extract_content' action"
                         },
                         'keys': {
                              'type': 'string',
                              'description': "Keys to send for 'send_keys' action"
                         },
                         'seconds': {
                              'type': 'integer',
                              'description': "Seconds to wait for 'wait' action"
                         }
                    },
                    'required': ['action'],
                    'dependencies': {
                         'go_to_url': ['url'],
                         'click_element': ['index'],
                         'input_text': ['index', 'text'],
                         'switch_tab': ['tab_id'],
                         'open_tab': ['url'],
                         'scroll_down': ['scroll_amount'],
                         'scroll_up': ['scroll_amount'],
                         'scroll_to_text': ['text'],
                         'send_keys': ['keys'],
                         'get_dropdown_options': ['index'],
                         'select_dropdown_option': ['index', 'text'],
                         'go_back': [],
                         'web_search': ['query'],
                         'wait': ['seconds'],
                         'extract_content': ['goal']
                    }
               }
          }
     }, {
          'type': 'function',
          'function': {
               'name': 'str_replace_editor',
               'description': 'Custom editing tool for viewing, creating and editing files\n* State is persistent across command calls and discussions with the user\n* If `path` is a file, `view` displays the result of applying `cat -n`. If `path` is a directory, `view` lists non-hidden files and directories up to 2 levels deep\n* The `create` command cannot be used if the specified `path` already exists as a file\n* If a `command` generates a long output, it will be truncated and marked with `<response clipped>`\n* The `undo_edit` command will revert the last edit made to the file at `path`\n\nNotes for using the `str_replace` command:\n* The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces!\n* If the `old_str` parameter is not unique in the file, the replacement will not be performed. Make sure to include enough context in `old_str` to make it unique\n* The `new_str` parameter should contain the edited lines that should replace the `old_str`\n',
               'parameters': {
                    'type': 'object',
                    'properties': {
                         'command': {
                              'description': 'The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.',
                              'enum': ['view', 'create', 'str_replace', 'insert', 'undo_edit'],
                              'type': 'string'
                         },
                         'path': {
                              'description': 'Absolute path to file or directory.',
                              'type': 'string'
                         },
                         'file_text': {
                              'description': 'Required parameter of `create` command, with the content of the file to be created.',
                              'type': 'string'
                         },
                         'old_str': {
                              'description': 'Required parameter of `str_replace` command containing the string in `path` to replace.',
                              'type': 'string'
                         },
                         'new_str': {
                              'description': 'Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.',
                              'type': 'string'
                         },
                         'insert_line': {
                              'description': 'Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.',
                              'type': 'integer'
                         },
                         'view_range': {
                              'description': 'Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.',
                              'items': {
                                   'type': 'integer'
                              },
                              'type': 'array'
                         }
                    },
                    'required': ['command', 'path']
               }
          }
     }, {
          'type': 'function',
          'function': {
               'name': 'terminate',
               'description': 'Terminate the interaction when the request is met OR if the assistant cannot proceed further with the task.\nWhen you have finished all the tasks, call this tool to end the work.',
               'parameters': {
                    'type': 'object',
                    'properties': {
                         'status': {
                              'type': 'string',
                              'description': 'The finish status of the interaction.',
                              'enum': ['success', 'failure']
                         }
                    },
                    'required': ['status']
               }
          }
     }],
     'tool_choice': < ToolChoice.AUTO: 'auto' > ,
     'timeout': 300,
     'max_tokens': 8192,
     'temperature': 0.0,
     'stream': False
}
